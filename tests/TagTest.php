<?php
/**
 * Test class for Tag.
 * Generated by PHPUnit on 2013-02-19 at 11:44:09.
 */
use Primalbase\Tag\Tag;
use Primalbase\Tag\TagNodes;

class TagTest extends PHPUnit_Framework_TestCase
{
  protected function setUp()
  {
    Tag::$codeFormat = false;
  }

  protected function tearDown()
  {
  }

  public function testConstruct()
  {
    $this->assertEquals(get_class(Tag::a()), 'Primalbase\Tag\Tag');
    $this->assertEquals((string)Tag::a(), '<a></a>');
    $this->assertEquals((string)Tag::create('hoge', array('class' => 'fuga'), 'munya'), '<hoge class="fuga">munya</hoge>');
    $this->assertEquals((string)Tag::create('hoge', array('class' => 'fuga'), '<munya'), '<hoge class="fuga">&lt;munya</hoge>');
    $this->assertEquals((string)Tag::div('<hoge class="fuga">munya</hoge>'), '<div>&lt;hoge class=&quot;fuga&quot;&gt;munya&lt;/hoge&gt;</div>');

    $this->assertEquals((string)Tag::div(array('class' => 'span12')), '<div class="span12"></div>');
    $this->assertEquals((string)Tag::div(array('class' => 'span12'), 'test', Tag::span("inner")), '<div class="span12">test<span>inner</span></div>');
    $this->assertEquals((string)Tag::createInstanceArray('div', array(array('class' => 'span9'), 'array contents.')), '<div class="span9">array contents.</div>');
  }

  public function testMember()
  {
    $this->assertEquals(Tag::table()->tagName(), 'table');
    $this->assertEquals(Tag::table(array('class' => 'horizontal'))->attributes(), array('class' => 'horizontal'));
  }

  public function testAttributes()
  {
    $this->assertEquals((string)Tag::div()->class('control-group'), '<div class="control-group"></div>');
    $this->assertEquals((string)Tag::a('here')->href('http://www.google.com'), '<a href="http://www.google.com">here</a>');
    $this->assertEquals((string)Tag::a('another')->attr('href', 'http://www.yahoo.com'), '<a href="http://www.yahoo.com">another</a>');
  }

  public function testAppend()
  {
    $this->assertEquals((string)Tag::div()->append(Tag::span('content')), '<div><span>content</span></div>');
    $this->assertEquals((string)Tag::ul()->append(TagNodes::create(Tag::li('item1'), Tag::li('item2')), 'outer'), '<ul><li>item1</li><li>item2</li>outer</ul>');

    $this->assertEquals((string)TagNodes::create()->append('<strong></strong>'), '&lt;strong&gt;&lt;/strong&gt;');
    $this->assertEquals((string)Tag::div()->append('<strong></strong>'), '<div>&lt;strong&gt;&lt;/strong&gt;</div>');
  }

  public function testAppendHtml()
  {
    $this->assertEquals('<div>&lt;span id=&quot;append_html&quot;&gt;test&lt;/span&gt;</div>', (string)Tag::div()->append('<span id="append_html">test</span>'));
    $this->assertEquals('<div><span id="append_html">test</span></div>', (string)Tag::div()->appendHtml('<span id="append_html">test</span>'));
  }

  public function testHtml4()
  {
    Tag::$DocType = 'Primalbase\Tag\DocType\Html4';
    $this->assertEquals((string)Tag::br(), '<br>');
  }

  public function testXhtml()
  {
    Tag::$DocType = 'Primalbase\Tag\DocType\Xhtml';
    $this->assertEquals((string)Tag::br(), '<br />');
  }

  public function testHtml5()
  {
    Tag::$DocType = 'Primalbase\Tag\DocType\Html5';
    $this->assertEquals((string)Tag::br(), '<br>');
  }

  public function testClassManipulation()
  {
    $this->assertEquals((string)Tag::div()->addClass('span1'), '<div class="span1"></div>');
    $this->assertEquals((string)Tag::div(array('class' => 'span1 label'))->removeClass('span1'), '<div class="label"></div>');
    $this->assertEquals((string)Tag::div()->addClass('span1', 'label'), '<div class="span1 label"></div>');
    $this->assertEquals((string)Tag::div(array('class' => 'span1 label'))->removeClass(array('label')), '<div class="span1"></div>');
  }

  public function testCodeFormat()
  {
    Tag::$codeFormat = true;
    $this->assertEquals((string)Tag::div()->addClass('span1'), '<div class="span1">'.PHP_EOL.'</div>'.PHP_EOL);
    $this->assertEquals((string)Tag::div('contents')->addClass('span1'), '<div class="span1">'.PHP_EOL.'  contents'.PHP_EOL.'</div>'.PHP_EOL);
    $this->assertEquals((string)Tag::br(), '<br>'.PHP_EOL);
    $this->assertEquals((string)Tag::div('contents'), '<div>'.PHP_EOL.'  contents'.PHP_EOL.'</div>'.PHP_EOL);
    $this->assertEquals((string)Tag::div(Tag::div(Tag::span('content'))), '<div>'.PHP_EOL.'  <div>'.PHP_EOL.'    <span>content</span>'.PHP_EOL.'  </div>'.PHP_EOL.'</div>'.PHP_EOL);
    $this->assertEquals((string)Tag::span(Tag::span(), Tag::span()), '<span><span></span><span></span></span>'.PHP_EOL);
  }

  public function testUpdate()
  {
    $this->assertEquals((string)Tag::div(array('class' => 'span1', 'id' => 'update'), 'update')->updateFromArray(array(array('class' => 'span2'))), '<div class="span2" id="update">update</div>');
    $this->assertEquals((string)Tag::div(array('class' => 'span1', 'id' => 'update'), 'update')->updateFromArray(array(Tag::span('new'))), '<div class="span1" id="update">update<span>new</span></div>');
  }
}
?>
